1- notice the presence of dp and dq. From the RSA wikipedia, we can read that this is used as such:

	For efficiency many popular crypto libraries (like OpenSSL, Java and .NET) use the following optimization for decryption and signing based on the Chinese remainder theorem. The following values are precomputed and stored as part of the private key

    p and q : the primes from the key generation,
    dP = d ( mod p − 1 ) ,
    dQ = d ( mod q − 1 ) and
    qinv = q − 1 ( mod p )

	These values allow the recipient to compute the exponentiation m = cd (mod pq) more efficiently as follows:

    m1 = c^dP ( mod p ) 
    m2 = c^dQ ( mod q ) 
    h = qinv ( m1 − m2 ) ( mod p ) 
    m = m2 + h*q

2- in our case, we have everything we need but we are missing qinv. I wrote the following script to compute the decrypted message:

#!/usr/bin/python
c = 95272795986475189505518980251137003509292621140166383887854853863720692420204142448424074834657149326853553097626486371206617513769930277580823116437975487148956107509247564965652417450550680181691869432067892028368985007229633943149091684419834136214793476910417359537696632874045272326665036717324623992885
p = 11387480584909854985125335848240384226653929942757756384489381242206157197986555243995335158328781970310603060671486688856263776452654268043936036556215243
q = 12972222875218086547425818961477257915105515705982283726851833508079600460542479267972050216838604649742870515200462359007315431848784163790312424462439629
dp = 8191957726161111880866028229950166742224147653136894248088678244548815086744810656765529876284622829884409590596114090872889522887052772791407131880103961
dq = 3570695757580148093370242608506191464756425954703930236924583065811730548932270595568088372441809535917032142349986828862994856575730078580414026791444659
qinv = (1/q) % p

m1 = pow(c, dp, p)
m2 = pow(c, dq, q)
h = 0
if m1 < m2:
	h = qinv*((m1 + (q/p)*p) - m2) % p
else:
	h = qinv*(m1 - m2) % p
m = m2 + h*q

print bytearray.fromhex(str(hex(m))[2:-1]).decode()

3- executing the script gets us the flag:
Theres_more_than_one_way_to_RSA

